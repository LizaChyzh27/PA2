// Вершинний шейдер
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelViewMatrix;
uniform vec3 lightPosition;
uniform vec3 viewPosition;
uniform float ambientStrength;
uniform float specularStrength;
uniform float shininess;
varying vec3 vColor;

void main() {
    vec3 transformedNormal = normalize(mat3(ModelViewMatrix) * normal);
    vec3 lightDir = normalize(lightPosition - (ModelViewMatrix * vec4(vertex, 1.0)).xyz);
    vec3 viewDir = normalize(viewPosition - (ModelViewMatrix * vec4(vertex, 1.0)).xyz);

    float diff = max(dot(transformedNormal, lightDir), 0.5);
    vec3 reflectDir = reflect(-lightDir, transformedNormal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);

    vec3 ambient = ambientStrength * vec3(1.0, 1.0, 1.0);
    vec3 diffuse = diff * vec3(1.0, 0.1, 0.0);
    vec3 specular = specularStrength * spec * vec3(1.0, 1.0, 1.0);

    vColor = ambient + diffuse + specular;

    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}

`;

// Фрагментний шейдер
const fragmentShaderSource = `
precision mediump float;
varying vec3 vColor;

void main() {
    gl_FragColor = vec4(vColor, 1.0);
}

`;
